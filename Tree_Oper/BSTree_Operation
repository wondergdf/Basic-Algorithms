/*
Author: Lucifa 
Date: 2013/1/27
Brief: Basic APIs of the BST Tree that include create, traversal(recursive & non-recursive), image,
       BFS(breadth first search) and getLCA(Latest common parent).
Image Example：
Input：    
   10
  / \
  6  14
 / \ / \
4  8 12 16

Output：
   10
  / \
 14  6
 / \ / \
16 12 8 4

*/

#include<iostream>  
#include<queue>  
#include<stack>  
using namespace std;  
  
//Description of BST Node 
typedef struct BiTNode  
{  
    char data;  
    struct BiTNode *lchild, *rchild;       
}BiTNode,*BiTree;  
  
//Create BST by pre-order  
void CreateBiTree(BiTNode **root)   
{  
    char ch; 
    scanf("\n%c", &ch);  
    if(ch=='#')  
        *root = NULL;  
    else  
    {  
        *root = (BiTNode *)malloc(sizeof(BiTNode));  
        (*root)->data = ch;  
        printf("please input the %c left child ：",ch);  
        CreateBiTree(&((*root)->lchild));  
        printf("and input the %c right child ：",ch);  
        CreateBiTree(&((*root)->rchild));  
    }  
}  
  
void PreOrder(BiTNode *root)  
{  
    if(root==NULL)  
        return ;  
    printf("%c ", root->data);
    PreOrder(root->lchild); 
    PreOrder(root->rchild); 
}  
  
//中序遍历的算法程序  
void InOrder(BiTNode *root)  
{  
    if(root==NULL)  
        return ;  
    InOrder(root->lchild); //递归调用，前序遍历左子树  
    printf("%c ", root->data); //输出数据  
    InOrder(root->rchild); //递归调用，前序遍历右子树  
}  
  
//后序遍历的算法程序  
void PostOrder(BiTNode *root)  
{  
    if(root==NULL)  
        return ;  
    PostOrder(root->lchild);      //递归调用，前序遍历左子树  
    PostOrder(root->rchild);      //递归调用，前序遍历右子树  
    printf("%c ", root->data);    //输出数据    
}  
  
/* 
二叉树的非递归前序遍历，前序遍历思想：先让根进栈，只要栈不为空，就可以做弹出操作， 
每次弹出一个结点，记得把它的左右结点都进栈，记得右子树先进栈，这样可以保证右子树在栈中总处于左子树的下面。 
*/ 
void PreOrder_Nonrecursive(BiTree T)     //先序遍历的非递归    
{  
    if(!T)    
        return ;    
    
    stack<BiTree> s;  
    s.push(T);  
  
    while(!s.empty())  
    {  
        BiTree temp = s.top();  
        cout<<temp->data<<" ";  
        s.pop();  
        if(temp->rchild)  
            s.push(temp->rchild);  
        if(temp->lchild)  
            s.push(temp->lchild);  
    }  
}  
  
  
void InOrderTraverse(BiTree T)   // 中序遍历的非递归  
{  
    if(!T)  
        return ;  
    stack<BiTree> S;  
    BiTree curr = T->lchild;    // 指向当前要检查的节点  
    S.push(T);  
    while(curr != NULL || !S.empty())  
    {  
        while(curr != NULL)    // 一直向左走  
        {  
            S.push(curr);  
            curr = curr->lchild;  
        }  
        curr = S.top();  
        S.pop();  
        cout<<curr->data<<"  ";  
        curr = curr->rchild;  
    }  
}  
  
void PostOrder_Nonrecursive(BiTree T)  // 后序遍历的非递归     双栈法  
{  
    stack<BiTree> s1 , s2;    
    BiTree curr ;           // 指向当前要检查的节点  
    s1.push(T);  
    while(!s1.empty())  // 栈空时结束    
    {  
        curr = s1.top();  
        s1.pop();  
        s2.push(curr);  
        if(curr->lchild)  
            s1.push(curr->lchild);  
        if(curr->rchild)  
            s1.push(curr->rchild);  
    }  
    while(!s2.empty())  
    {  
        printf("%c ", s2.top()->data);  
        s2.pop();  
    }  
}  
  
 
int depth(BiTNode *T)   //树的深度  
{  
    if(!T)  
        return 0;  
    int d1,d2;  
    d1=depth(T->lchild);  
    d2=depth(T->rchild);  
    return (d1>d2?d1:d2)+1;   
}  
int CountNode(BiTNode *T)  
{  
    if(T == NULL)  
        return 0;  
    return 1+CountNode(T->lchild)+CountNode(T->rchild);  
}  
  
//按层打印二叉树
void TravLevel(BiTNode *Root)
{
	queue<BiTNode*> BSTree_Qu;//创建一个 BSTreeNode* 类型的队列容器

	if(Root!=NULL)
	{
	  cout<<Root->data<<"  ";//输出根节点
	}
	BSTree_Qu.push(Root);//将根节点入队

	while(!BSTree_Qu.empty())//队列不为空时
	{
	  Root=BSTree_Qu.front();//取出队头元素（front 操作返回队头，但不删除队头，pop函数直接删除队头元素即出队）
	  BSTree_Qu.pop();//删除队头元素
	  if(Root->lchild!=NULL)//左子不为空
	  {
		  cout<<Root->lchild->data<<"  ";//输出左子
		  BSTree_Qu.push(Root->lchild);//将左子入队
	  }
	  if(Root->rchild!=NULL)//同上
	  {
		  cout<<Root->rchild->data<<"  ";
		  BSTree_Qu.push(Root->rchild);
	  }
	}
}

void Image_BSTree(BiTNode *Root)
{
	queue<BiTNode *> Qu;//创建一个 BSTreeNode* 类型的队列容器
	BiTNode *temp = NULL;//创建一个交换temp
	if(Root!=NULL)//根节点非空时
	{
		Qu.push(Root);//压入队列
		while(!Qu.empty())//队列非空时
		{
			Root=Qu.front();//取队头元素
			Qu.pop();
			if(Root->lchild!=NULL && Root->rchild!=NULL)//如果左右子都非空
			{
				temp=Root->lchild;
				Root->lchild=Root->rchild;//交换左右子地址
				Root->rchild=temp;

				Qu.push(Root->lchild);//压入左子和右子
				Qu.push(Root->rchild);
			}
			else if(Root->lchild!=NULL && Root->rchild==NULL)//当左子非空，右子为空时
			{
				Root->rchild=Root->lchild;//交换左子给右子
				Root->lchild=NULL;//删除左子指针
				Qu.push(Root->rchild);//压入右子指针
			}
			else if(Root->rchild!=NULL && Root->lchild==NULL)//同上
			{
				Root->lchild=Root->rchild;
				Root->rchild=NULL;
				Qu.push(Root->lchild);
			}
		}
	}
}

//返回a,b 节点最小公共父节点
BiTNode *getLCA(BiTNode* head, BiTNode* a, BiTNode* b){
    if(head == NULL) return NULL;
    if(a == head || b == head){
               return head;
        }
    BiTNode *tl = getLCA(head->lchild, a, b);
    BiTNode *tr = getLCA(head->rchild, a, b);
    if(tl!=NULL && tr!=NULL){
        return (tl!=tr ? head : tl);
    }
    if(tl != NULL) return tl;
        if(tr != NULL) return tr;
        return NULL;
}

int main(void)  
{  
    BiTNode *root=NULL; //定义一个根结点  
    int flag=1,k;  
    printf("                     本程序实现二叉树的基本操作。\n");  
    printf("可以进行建立二叉树，递归先序、中序、后序遍历，非递归先序、中序遍历及非递归层序遍历等操作。\n");  
  
    while(flag)  
    {  
        printf("\n");  
        printf("|--------------------------------------------------------------|\n");  
        printf("|                    二叉树的基本操作如下:                     |\n");  
        printf("|                        0.创建二叉树                          |\n");  
        printf("|                        1.递归先序遍历                        |\n");  
        printf("|                        2.递归中序遍历                        |\n");  
        printf("|                        3.递归后序遍历                        |\n");  
        printf("|                        4.非递归先序遍历                      |\n");  
        printf("|                        5.非递归中序遍历                      |\n");  
        printf("|                        6.非递归后序遍历                      |\n");  
        printf("|                        7.非递归层序遍历                      |\n");  
        printf("|                        8.二叉树的深度                        |\n");  
        printf("|                        9.二叉树的结点个数                    |\n");
		printf("|                       10.镜像二叉树                          |\n");
        printf("|                       11.退出程序                            |\n");  
        printf("|--------------------------------------------------------------|\n");  
        printf("                        请选择功能：");  
        scanf("%d",&k);  
        switch(k)  
        {  
        case 0:  
            printf("请建立二叉树并输入二叉树的根节点：");  
            CreateBiTree(&root);  
            break;  
        case 1:  
            if(root)  
            {  
                printf("递归先序遍历二叉树的结果为：");  
                PreOrder(root);  
                printf("\n");  
            }  
            else  
                printf("          二叉树为空！\n");  
            break;  
        case 2:  
            if(root)  
            {  
                printf("递归中序遍历二叉树的结果为：");  
                InOrder(root);  
                printf("\n");  
            }  
            else  
                printf("          二叉树为空！\n");  
            break;  
        case 3:  
            if(root)  
            {  
                printf("递归后序遍历二叉树的结果为：");  
                PostOrder(root);  
                printf("\n");  
            }  
            else  
                printf("          二叉树为空！\n");  
            break;  
        case 4:  
            if(root)  
            {  
                printf("非递归先序遍历二叉树：");  
                PreOrder_Nonrecursive(root);  
                printf("\n");  
            }  
            else  
                printf("          二叉树为空！\n");  
            break;  
        case 5:  
            if(root)  
            {  
                printf("非递归中序遍历二叉树：");  
                InOrderTraverse(root);  
                printf("\n");  
            }  
            else  
                printf("          二叉树为空！\n");  
            break;  
        case 6:  
            if(root)  
            {  
                printf("非递归后序遍历二叉树：");  
                PostOrder_Nonrecursive(root);  
                printf("\n");  
            }  
            else  
                printf("          二叉树为空！\n");  
            break;  
        case 7:  
            if(root)  
            {  
                printf("非递归层序广度遍历二叉树：");  
				TravLevel(root);
                printf("\n");  
            }  
            else  
                printf("          二叉树为空！\n");  
            break;  
        case 8:  
            if(root)  
                printf("这棵二叉树的深度为：%d\n",depth(root));  
            else  
                printf("          二叉树为空！\n");  
            break;  
        case 9:  
            if(root)  
                printf("这棵二叉树的结点个数为：%d\n",CountNode(root));  
            else  
                printf("          二叉树为空！\n");  
            break;  
		case 10:  
			if(root)  
			{
				printf("镜像二叉树：");  
	            Image_BSTree(root);
                TravLevel(root);
			    printf("\n");  
			}
        else  
            printf("          二叉树为空！\n");  
        break;  
        default:  
            flag=0;  
            printf("程序运行结束，按任意键退出！\n");  
        }  
    }  
    system("pause");  
    return 0;  
}  


